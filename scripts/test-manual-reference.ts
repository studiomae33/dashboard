// Script de test pour v√©rifier la saisie manuelle de r√©f√©rences
import { prisma } from '../src/lib/prisma'

async function testManualReference() {
  console.log('üß™ Test de saisie manuelle de r√©f√©rence de devis...\n')

  try {
    // 1. V√©rifier qu'il y a un client disponible
    const clients = await prisma.client.findMany()
    if (clients.length === 0) {
      console.log('‚ùå Aucun client trouv√© pour le test')
      return
    }
    
    const testClient = clients[0]
    console.log(`‚úÖ Client de test trouv√©: ${testClient.firstName} ${testClient.lastName}`)

    // 2. Cr√©er un devis avec une r√©f√©rence personnalis√©e
    const customReference = `TEST-${Date.now()}`
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)
    tomorrow.setHours(14, 0, 0, 0)

    const endTime = new Date(tomorrow)
    endTime.setHours(16, 0, 0, 0)

    console.log(`üìù Cr√©ation d'un devis avec r√©f√©rence personnalis√©e: ${customReference}`)

    const testQuote = await prisma.quoteRequest.create({
      data: {
        clientId: testClient.id,
        reference: customReference,
        desiredStart: tomorrow,
        desiredEnd: endTime,
        background: 'Cyclo blanc',
        message: 'Test de r√©f√©rence personnalis√©e',
        status: 'DRAFT'
      }
    })

    console.log(`‚úÖ Devis cr√©√© avec r√©f√©rence: ${testQuote.reference}`)

    // 3. V√©rifier que la r√©f√©rence est bien celle qu'on a saisie
    if (testQuote.reference === customReference) {
      console.log('‚úÖ La r√©f√©rence personnalis√©e a √©t√© correctement enregistr√©e')
    } else {
      console.log('‚ùå Erreur: la r√©f√©rence enregistr√©e ne correspond pas √† celle saisie')
    }

    // 4. Tester la contrainte d'unicit√©
    console.log('\nüîí Test de contrainte d\'unicit√©...')
    
    try {
      await prisma.quoteRequest.create({
        data: {
          clientId: testClient.id,
          reference: customReference, // M√™me r√©f√©rence
          desiredStart: tomorrow,
          desiredEnd: endTime,
          background: 'Fond noir',
          status: 'DRAFT'
        }
      })
      console.log('‚ùå Erreur: la contrainte d\'unicit√© n\'a pas fonctionn√©')
    } catch (error) {
      if (error instanceof Error && error.message.includes('Unique constraint')) {
        console.log('‚úÖ Contrainte d\'unicit√© respect√©e - impossible de cr√©er un devis avec la m√™me r√©f√©rence')
      } else {
        console.log('‚ùå Erreur inattendue lors du test d\'unicit√©:', error)
      }
    }

    // 5. Cr√©er un devis avec une r√©f√©rence diff√©rente pour v√©rifier que √ßa fonctionne
    const customReference2 = `TEST-${Date.now()}-2`
    const testQuote2 = await prisma.quoteRequest.create({
      data: {
        clientId: testClient.id,
        reference: customReference2,
        desiredStart: tomorrow,
        desiredEnd: endTime,
        background: 'Fond color√©',
        status: 'DRAFT'
      }
    })

    console.log(`‚úÖ Devis cr√©√© avec une r√©f√©rence diff√©rente: ${testQuote2.reference}`)

    // 6. Nettoyer les donn√©es de test
    await prisma.quoteRequest.delete({
      where: { id: testQuote.id }
    })
    
    await prisma.quoteRequest.delete({
      where: { id: testQuote2.id }
    })

    console.log('\n‚úÖ Donn√©es de test nettoy√©es')
    console.log('\nüéâ Test r√©ussi ! La saisie manuelle de r√©f√©rence fonctionne parfaitement.')
    console.log('\nüìã R√©sum√© des fonctionnalit√©s valid√©es:')
    console.log('   - ‚úÖ Saisie de r√©f√©rence personnalis√©e')
    console.log('   - ‚úÖ Contrainte d\'unicit√© des r√©f√©rences')
    console.log('   - ‚úÖ Cr√©ation de devis avec r√©f√©rences diff√©rentes')

  } catch (error) {
    console.error('‚ùå Erreur pendant le test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testManualReference()
